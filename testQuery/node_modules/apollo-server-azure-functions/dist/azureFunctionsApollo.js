"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var azure_functions_typescript_1 = require("azure-functions-typescript");
var apollo_server_core_1 = require("apollo-server-core");
var apollo_server_module_graphiql_1 = require("apollo-server-module-graphiql");
function graphqlAzureFunctions(options) {
    if (!options) {
        throw new Error('Apollo Server requires options.');
    }
    if (arguments.length > 1) {
        throw new Error("Apollo Server expects exactly one argument, got " + arguments.length);
    }
    var graphqlHandler = function (httpContext, request) {
        var queryRequest = {
            method: request.method,
            options: options,
            query: request.method === 'POST' ? request.body : request.query,
        };
        if (queryRequest.query && typeof queryRequest.query === 'string') {
            queryRequest.query = JSON.parse(queryRequest.query);
        }
        return apollo_server_core_1.runHttpQuery([httpContext, request], queryRequest)
            .then(function (gqlResponse) {
            var result = {
                status: azure_functions_typescript_1.HttpStatusCodes.OK,
                headers: {
                    'Content-Type': 'application/json',
                },
                body: gqlResponse,
                isRaw: true,
            };
            httpContext.res = result;
            httpContext.done(null, result);
        })
            .catch(function (error) {
            var result = {
                status: error.statusCode,
                headers: error.headers,
                body: error.message,
            };
            httpContext.res = result;
            httpContext.done(null, result);
        });
    };
    return graphqlHandler;
}
exports.graphqlAzureFunctions = graphqlAzureFunctions;
function graphiqlAzureFunctions(options) {
    var graphiqlHandler = function (httpContext, request) {
        var query = request.query;
        apollo_server_module_graphiql_1.resolveGraphiQLString(query, options, httpContext, request).then(function (graphiqlString) {
            var result = {
                status: azure_functions_typescript_1.HttpStatusCodes.OK,
                headers: {
                    'Content-Type': 'text/html',
                },
                body: graphiqlString,
                isRaw: true,
            };
            httpContext.res = result;
            httpContext.done(null, result);
        }, function (error) {
            httpContext.res = {
                status: 500,
                body: error.message,
            };
            httpContext.done(null, httpContext.res);
        });
    };
    return graphiqlHandler;
}
exports.graphiqlAzureFunctions = graphiqlAzureFunctions;
//# sourceMappingURL=azureFunctionsApollo.js.map