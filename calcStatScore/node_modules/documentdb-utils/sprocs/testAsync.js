// Generated by CoffeeScript 1.9.2
(function() {
  module.exports = function(memo) {
    var async, getAsync;
    if (memo == null) {
      memo = {};
    }
    getAsync = require('../mixins/getAsync');
    async = getAsync();
    async.waterfall([
      function(callback) {
        memo.stepOne = true;
        return callback(null, 'one');
      }, function(parameter, callback) {
        memo.waterfall1 = true;
        memo.waterfallParameter = parameter;
        return callback(null, 'two');
      }
    ], function(err, result) {
      if (err != null) {
        memo.error = err;
        throw new Error(err);
      }
      memo.waterfallEnd = true;
      return memo.waterfallResult = result;
    });
    async.series([
      function(callback) {
        memo.series1 = true;
        return callback(null, 'one');
      }, function(callback) {
        memo.series2 = true;
        return callback(null, 'two');
      }
    ], function(err, result) {
      if (err != null) {
        memo.error = err;
        throw new Error(err);
      }
      memo.seriesEnd = true;
      return memo.seriesResult = result;
    });
    async.parallel([
      function(callback) {
        memo.parallel1 = true;
        return callback(null, 'one');
      }, function(callback) {
        memo.parallel2 = true;
        return callback(null, 'two');
      }
    ], function(err, result) {
      if (err != null) {
        memo.error = err;
        throw new Error(err);
      }
      memo.parallelEnd = true;
      return memo.parallelResult = result;
    });
    async.auto({
      one: function(callback) {
        memo.auto1 = true;
        return callback(null, 'one');
      },
      two: function(callback) {
        memo.auto2 = true;
        return callback(null, 'two');
      },
      three: [
        'one', 'two', function(callback, results) {
          memo.auto3 = true;
          memo.auto3Results = results;
          return callback(null, 'three');
        }
      ]
    }, function(err, result) {
      if (err != null) {
        memo.error = err;
        throw new Error(err);
      }
      memo.autoEnd = true;
      return memo.autoResult = result;
    });
    return getContext().getResponse().setBody(memo);
  };

}).call(this);
