// Generated by CoffeeScript 1.9.2
(function() {
  module.exports = function(memo) {
    var collection, collectionLink, createDocument, getIndex, getRandomValue, key, keys, possibleValues, value;
    if ((memo != null ? memo.remaining : void 0) == null) {
      throw new Error('createVariedDocuments must be called with an object containing a `remaining` field.');
    }
    if (memo.totalCount == null) {
      memo.totalCount = 0;
    }
    memo.countForThisRun = 0;
    possibleValues = {
      ProjectHierarchy: [[1, 2, 3], [1, 2, 4], [1, 2], [5], [5, 6]],
      Priority: [1, 2, 3, 4],
      Severity: [1, 2, 3, 4],
      Points: [null, 0.5, 1, 2, 3, 5, 8, 13],
      State: ['Backlog', 'Ready', 'In Progress', 'In Testing', 'Accepted', 'Shipped']
    };
    getIndex = function(length) {
      return Math.floor(Math.random() * length);
    };
    getRandomValue = function(possibleValues) {
      var index;
      index = getIndex(possibleValues.length);
      return possibleValues[index];
    };
    keys = (function() {
      var results;
      results = [];
      for (key in possibleValues) {
        value = possibleValues[key];
        results.push(key);
      }
      return results;
    })();
    collection = getContext().getCollection();
    collectionLink = collection.getSelfLink();
    memo.stillQueueing = true;
    memo.continuation = "Value does not matter";
    createDocument = function() {
      var i, len, row;
      if (memo.remaining > 0 && memo.stillQueueing) {
        row = {};
        for (i = 0, len = keys.length; i < len; i++) {
          key = keys[i];
          row[key] = getRandomValue(possibleValues[key]);
        }
        getContext().getResponse().setBody(memo);
        return memo.stillQueueing = collection.createDocument(collectionLink, row, function(error, resource, options) {
          if (error != null) {
            throw new Error(error);
          } else if (memo.stillQueueing) {
            memo.remaining--;
            memo.countForThisRun++;
            memo.totalCount++;
            return createDocument();
          } else if (memo.remaining > 0) {
            memo.continuation = 'Value does not matter';
            return getContext().getResponse().setBody(memo);
          } else {
            memo.continuation = null;
            return getContext().getResponse().setBody(memo);
          }
        });
      } else {
        if (memo.stillQueueing) {
          memo.continuation = null;
        } else {
          memo.continuation = 'Value does not matter';
        }
        getContext().getResponse().setBody(memo);
      }
    };
    return createDocument();
  };

}).call(this);
