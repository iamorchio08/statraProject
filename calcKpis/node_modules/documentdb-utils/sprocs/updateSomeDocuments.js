// Generated by CoffeeScript 1.9.2
(function() {
  module.exports = function(memo) {
    var collection, getIndex, getRandomRow, getRandomValue, key, keys, onReadDocuments, possibleValues, query, setBody, value;
    possibleValues = {
      ProjectHierarchy: [[1, 2, 3], [1, 2, 4], [1, 2], [5], [5, 6]],
      Priority: [1, 2, 3, 4],
      Severity: [1, 2, 3, 4],
      Points: [null, 0.5, 1, 2, 3, 5, 8, 13],
      State: ['Backlog', 'Ready', 'In Progress', 'In Testing', 'Accepted', 'Shipped']
    };
    getIndex = function(length) {
      return Math.floor(Math.random() * length);
    };
    getRandomValue = function(possibleValues) {
      var index;
      index = getIndex(possibleValues.length);
      return possibleValues[index];
    };
    keys = (function() {
      var results;
      results = [];
      for (key in possibleValues) {
        value = possibleValues[key];
        results.push(key);
      }
      return results;
    })();
    getRandomRow = function() {
      var i, len, row;
      row = {};
      for (i = 0, len = keys.length; i < len; i++) {
        key = keys[i];
        row[key] = getRandomValue(possibleValues[key]);
      }
      return row;
    };
    collection = getContext().getCollection();
    if (memo == null) {
      memo = {};
    }
    if (memo.transactions == null) {
      memo.transactions = [];
    }
    memo.stillQueueing = true;
    query = function() {
      var responseOptions, stillQueuingOperations;
      if (memo.stillQueueing) {
        responseOptions = {
          pageSize: memo.remaining
        };
        setBody();
        return stillQueuingOperations = collection.readDocuments(collection.getSelfLink(), responseOptions, onReadDocuments);
      }
    };
    onReadDocuments = function(err, resources, options) {
      var documentLink, etag, newDocument, oldDocument, results;
      if (err) {
        throw err;
      }
      if (resources.length !== memo.remaining) {
        throw new Error("Expected memo.remaining (" + memo.remaining + ") and the number of rows returned (" + resources.length + ") to match. They don't.");
      }
      memo.stillQueueing = true;
      results = [];
      while (memo.remaining > 0 && memo.stillQueueing) {
        oldDocument = resources[memo.remaining - 1];
        documentLink = oldDocument._self;
        etag = oldDocument._etag;
        options = {
          etag: etag
        };
        newDocument = getRandomRow();
        newDocument.id = oldDocument.id;
        getContext().getResponse().setBody(memo);
        memo.stillQueueing = collection.replaceDocument(documentLink, newDocument, options);
        if (memo.stillQueueing) {
          memo.transactions.push({
            oldDocument: oldDocument,
            newDocument: newDocument
          });
          results.push(memo.remaining--);
        } else {
          results.push(void 0);
        }
      }
      return results;
    };
    setBody = function() {
      return getContext().getResponse().setBody(memo);
    };
    query();
    return memo;
  };

}).call(this);
